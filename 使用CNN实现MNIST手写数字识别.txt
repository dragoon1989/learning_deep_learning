#coding:utf-8
import tensorflow as tf
import input_data as input_data			# 导入模块input_data
import time

"""
权重初始化
初始化为一个接近0的很小的正数
"""
def weight_variable(shape):
    initial = tf.truncated_normal(shape, stddev = 0.1)
    return tf.Variable(initial)
# 原型：tf.truncated_normal(shape, mean=0.0, stddev=1.0, dtype=tf.float32, seed=None, name=None)
# 按照shape的形状生成一个满足正态分布的随机数tensor

def bias_variable(shape):
    initial = tf.constant(0.1, shape = shape)
    return tf.Variable(initial)

"""
卷积和池化，使用卷积步长为1（stride size）,0边距（padding size）
池化用简单传统的2x2大小的模板做max pooling
"""
def conv2d(x, W):
    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding = 'SAME')
    # tf.nn.conv2d(input, filter, strides, padding, use_cudnn_on_gpu=None, data_format=None, name=None)
    # x(input)  : [batch, in_height, in_width, in_channels]，也就是成批输入的图片数据
    # W(filter) : [filter_height, filter_width, in_channels, out_channels]
    # 卷积核，一个variable的tensor（我们要优化的就是它），高和宽指定了一次卷积处理的像素区域，in_channels必须跟输入数据一致，out_channels自定
    # 一个卷积层中的每个过滤器（卷积核）都要扫描全部图像像素，这样保证同一个过滤器提取到的特征
    # 不会与图像某个局部的位置产生不必要的关联
    # strides   : The stride of the sliding window for each dimension of input.
    # 也就是滑窗的形式，是个4轴tensor，分别是滑窗在输入数据4个轴上的滑动步长
    # 例如：strides = [1, 1, 1, 1]就表示对依次处理每个batch，每个batch中卷积核在图片x,y方向上逐像素滑动，并且依次处理所有通道
    #  For the most common case of the same horizontal and vertices strides, strides = [1, stride, stride, 1]
    # padding : 只能是'VALID'或者'SAME'之一，设定卷积核的滑动与图片大小不匹配时的填充模式
    # padding = 'VALID'，如果滑动若干次后剩下的像素不足以再滑动，就直接丢弃这部分像素
    # padding = 'SAME'，在图像周边填充0，使得生成的feature map的大小总是与原图相同（same）
    # data_format：只能是'NHWC'（默认）或者'NCHW'，确保输入跟它形式一致就可以
    # 注意，最后的输出形状应该是[batch, out_height, out_width, out_channel]
    # 如果采用padding='VALID'，则out_height=ceil((in_height-filter_height+1)/strides[1])
    # out_width同理；如果是padding='SAME'，那out_height = in_height。
    # 这个输出的张量就是所谓的feature map

def max_pool_2x2(x):
    return tf.nn.max_pool(x, ksize = [1, 2, 2, 1],
                          strides = [1, 2, 2, 1], padding = 'SAME')
    # 原型：tf.nn.max_pool(value, ksize, strides, padding, data_format='NHWC', name=None)
    # x(value)              : [batch, height, width, channels]（跟data_format一致就行）
    # ksize(pool大小)        : A list of ints that has length >= 4. The size of the window for each dimension of the input tensor.
    # 用于指定池化处理的范围，4轴张量，一般不会对batch和channel池化，所以就是[1,h,w,1]
    # 表示每次把一个hxw的区域池化
    # strides(pool滑动大小)   : A list of ints that has length >= 4. The stride of the sliding window for each dimension of the input tensor.
    # 用于指定滑窗模式，跟卷积一样，不过一般pooling的意义就是下采样，所以padding通常都是valid而不会用same

start = time.clock() #计算开始时间
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True) 
# 根据实际数据的位置，获取MNIST数据输入

"""
第一层 卷积层

x_image(batch, 28, 28, 1) -> h_pool1(batch, 14, 14, 32)
"""
x = tf.placeholder(tf.float32,[None, 784])
x_image = tf.reshape(x, [-1, 28, 28, 1]) 	#最后一维代表通道数目，如果是rgb则为3 
W_conv1 = weight_variable([5, 5, 1, 32])	# 构造卷积核（接受5x5单通道图片，输出32个通道的feature map）
b_conv1 = bias_variable([32])			# 对卷积核的输出进行offset

h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1) # 虽然conv2d的输出形状与b_conv1不同
# 但是可以利用numpy的广播机制正确进行offset
# 这里的activation fun用的是reLU

# x_image -> [batch, in_height, in_width, in_channels]
#            [batch, 28, 28, 1]
# W_conv1 -> [filter_height, filter_width, in_channels, out_channels]
#            [5, 5, 1, 32]
# output  -> [batch, out_height, out_width, out_channels]
#            [batch, 28, 28, 32]

h_pool1 = max_pool_2x2(h_conv1)
# h_conv1 -> [batch, in_height, in_weight, in_channels]
#            [batch, 28, 28, 32]
# output  -> [batch, out_height, out_weight, out_channels]
#            [batch, 14, 14, 32]

"""
第二层 卷积层

h_pool1(batch, 14, 14, 32) -> h_pool2(batch, 7, 7, 64)
"""
# 从池化后的feature map中继续提取特征，这次输出通道增长到64
W_conv2 = weight_variable([5, 5, 32, 64])		
b_conv2 = bias_variable([64])

h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)
# h_pool1 -> [batch, 14, 14, 32]
# W_conv2 -> [5, 5, 32, 64]
# output  -> [batch, 14, 14, 64]
h_pool2 = max_pool_2x2(h_conv2)
# h_conv2 -> [batch, 14, 14, 64]
# output  -> [batch, 7, 7, 64]

"""
第三层 全连接层

h_pool2(batch, 7, 7, 64) -> h_fc1(1, 1024)
"""
# 接收第二层池化后的输入（总共7x7,64通道的feature map，因为是全连接，因此就需要这么多nerv）
# 输出是1024个通道
W_fc1 = weight_variable([7 * 7 * 64, 1024])
b_fc1 = bias_variable([1024])

h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)

"""
Dropout

h_fc1 -> h_fc1_drop, 训练中启用，测试中关闭
"""
keep_prob = tf.placeholder("float")
# tf.nn.droupout(input, keep_prob)会按照keep_prob的概率随机保留input中的分量
h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)

"""
第四层 Softmax输出层
"""
#接受全连接层的1024通道输出，然后输出10个feature（对应数字0～9）
W_fc2 = weight_variable([1024, 10])
b_fc2 = bias_variable([10])

y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)

"""
训练和评估模型

ADAM优化器来做梯度最速下降,feed_dict中加入参数keep_prob控制dropout比例
"""
y_ = tf.placeholder("float", [None, 10])
cross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv)) #计算交叉熵
train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy) #使用adam优化器来以0.0001的学习率来进行微调
# ADAM就是同时使用自适应梯度法和动量法的优化算法
correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1)) #判断预测标签和实际标签是否匹配
accuracy = tf.reduce_mean(tf.cast(correct_prediction,"float"))

sess = tf.Session() 					#启动创建的模型
sess.run(tf.global_variables_initializer()) 	#初始化变量

for i in range(5000): 					#开始训练模型，循环训练5000次
    batch = mnist.train.next_batch(50) 	#batch大小设置为50
    if i % 100 == 0:
    	# 除了使用sess.run(train_accuracy)，还能这么计算
        train_accuracy = accuracy.eval(sess,feed_dict = {x:batch[0], y_:batch[1], keep_prob:1.0})
        print("step %d, train_accuracy %g" %(i, train_accuracy))
        #end if
    train_step.run(session = sess, feed_dict = {x:batch[0], y_:batch[1], keep_prob:0.5}) 
    #训练过程中，神经元输出保持不变的概率（也就是dropout的概率）为50%
#end for

print("test accuracy %g" %accuracy.eval(sess,feed_dict = {x:mnist.test.images, y_:mnist.test.labels,
                   keep_prob:1.0})) 
#测试过程中不需要dropout，keep_prob 为 1
#不过测试图片较多，一次性加载并测试的内存开销比较大，在我的2GB内存虚拟机上完全跑不动……
#在计算节点服务器上倒是没问题

end = time.clock() #计算程序结束时间
print("running time is %g s") % (end-start)

关于run和eval：
（1）假如有tensor t，对t.eval()就等价于在default session中run(t)
（2）run和eval时，tensorflow会根据tensor graph的数据流向确定要求职的tensor所依赖的各个tensor和operation，然后启动一次流经所有这些节点的数据流，得到最后所需的结果